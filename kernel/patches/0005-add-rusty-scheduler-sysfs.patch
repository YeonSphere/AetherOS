diff --git a/kernel/sched/rusty_sysfs.c b/kernel/sched/rusty_sysfs.c
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/kernel/sched/rusty_sysfs.c
@@ -0,0 +1,156 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/sysfs.h>
+#include <linux/kobject.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+#include <linux/sched/rusty.h>
+
+#ifdef CONFIG_SCHED_RUSTY
+
+static struct kobject *rusty_kobj;
+
+/* Global scheduler parameters */
+static unsigned int rusty_latency = RUSTY_DEFAULT_LATENCY;
+static unsigned int rusty_min_granularity = RUSTY_MIN_GRANULARITY;
+static unsigned int rusty_load_balance_interval = RUSTY_LB_INTERVAL;
+static unsigned int rusty_imbalance_pct = RUSTY_IMBALANCE_PCT;
+
+/* Sysfs attribute show/store functions */
+static ssize_t latency_show(struct kobject *kobj,
+                           struct kobj_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%u\n", rusty_latency);
+}
+
+static ssize_t latency_store(struct kobject *kobj,
+                            struct kobj_attribute *attr,
+                            const char *buf, size_t count)
+{
+    unsigned int val;
+    int ret;
+
+    ret = kstrtouint(buf, 10, &val);
+    if (ret < 0)
+        return ret;
+
+    if (val < RUSTY_MIN_GRANULARITY)
+        return -EINVAL;
+
+    rusty_latency = val;
+    return count;
+}
+
+static ssize_t min_granularity_show(struct kobject *kobj,
+                                   struct kobj_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%u\n", rusty_min_granularity);
+}
+
+static ssize_t min_granularity_store(struct kobject *kobj,
+                                    struct kobj_attribute *attr,
+                                    const char *buf, size_t count)
+{
+    unsigned int val;
+    int ret;
+
+    ret = kstrtouint(buf, 10, &val);
+    if (ret < 0)
+        return ret;
+
+    if (val > rusty_latency)
+        return -EINVAL;
+
+    rusty_min_granularity = val;
+    return count;
+}
+
+static ssize_t load_balance_interval_show(struct kobject *kobj,
+                                        struct kobj_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%u\n", rusty_load_balance_interval);
+}
+
+static ssize_t load_balance_interval_store(struct kobject *kobj,
+                                         struct kobj_attribute *attr,
+                                         const char *buf, size_t count)
+{
+    unsigned int val;
+    int ret;
+
+    ret = kstrtouint(buf, 10, &val);
+    if (ret < 0)
+        return ret;
+
+    if (val < HZ/100 || val > HZ)
+        return -EINVAL;
+
+    rusty_load_balance_interval = val;
+    return count;
+}
+
+static ssize_t imbalance_pct_show(struct kobject *kobj,
+                                 struct kobj_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%u\n", rusty_imbalance_pct);
+}
+
+static ssize_t imbalance_pct_store(struct kobject *kobj,
+                                  struct kobj_attribute *attr,
+                                  const char *buf, size_t count)
+{
+    unsigned int val;
+    int ret;
+
+    ret = kstrtouint(buf, 10, &val);
+    if (ret < 0)
+        return ret;
+
+    if (val < 100 || val > 200)
+        return -EINVAL;
+
+    rusty_imbalance_pct = val;
+    return count;
+}
+
+/* Sysfs attributes */
+static struct kobj_attribute latency_attr =
+    __ATTR(latency, 0644, latency_show, latency_store);
+static struct kobj_attribute min_granularity_attr =
+    __ATTR(min_granularity, 0644, min_granularity_show, min_granularity_store);
+static struct kobj_attribute load_balance_interval_attr =
+    __ATTR(load_balance_interval, 0644, load_balance_interval_show,
+           load_balance_interval_store);
+static struct kobj_attribute imbalance_pct_attr =
+    __ATTR(imbalance_pct, 0644, imbalance_pct_show, imbalance_pct_store);
+
+static struct attribute *rusty_attrs[] = {
+    &latency_attr.attr,
+    &min_granularity_attr.attr,
+    &load_balance_interval_attr.attr,
+    &imbalance_pct_attr.attr,
+    NULL,
+};
+
+static struct attribute_group rusty_attr_group = {
+    .attrs = rusty_attrs,
+};
+
+int __init rusty_sysfs_init(void)
+{
+    int ret;
+
+    rusty_kobj = kobject_create_and_add("rusty", kernel_kobj);
+    if (!rusty_kobj)
+        return -ENOMEM;
+
+    ret = sysfs_create_group(rusty_kobj, &rusty_attr_group);
+    if (ret)
+        kobject_put(rusty_kobj);
+
+    return ret;
+}
+late_initcall(rusty_sysfs_init);
+
+#endif /* CONFIG_SCHED_RUSTY */
